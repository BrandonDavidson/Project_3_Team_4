# -*- coding: utf-8 -*-
"""IC Tensorflow Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c9D1oeMGG_PF4ym7qgGeem-T9yhm2ocg
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np
import os
import numpy as np
from PIL import Image
from sklearn.model_selection import train_test_split

# Load the Traffic Signs Dataset
def load_custom_dataset(train_dir='train', img_size=(32, 32), test_size=0.2, random_state=42):
    image_dir = os.path.join(train_dir, 'image')
    label_dir = os.path.join(train_dir, 'label')

    images = []
    labels = []

    # Get sorted list of filenames
    image_files = sorted(os.listdir(image_dir))
    label_files = sorted(os.listdir(label_dir))

    if len(image_files) != len(label_files):
        raise ValueError("Number of images and labels do not match.")

    for img_file, label_file in zip(image_files, label_files):
        img_path = os.path.join(image_dir, img_file)
        label_path = os.path.join(label_dir, label_file)

        try:
            # Load and preprocess image
            img = Image.open(img_path).convert('RGB')
            img = img.resize(img_size)
            img_array = np.array(img) / 255.0  # Normalize to [0, 1]
            images.append(img_array)

            # Load label
            with open(label_path, 'r') as f:
                label = int(f.read().strip())  # Assuming labels are integers
            labels.append(label)
        except Exception as e:
            print(f"Error loading image {img_path} or label {label_path}: {e}")

    images = np.array(images)
    labels = np.array(labels)

    # Split the data into train and test sets
    train_images, test_images, train_labels, test_labels = train_test_split(
        images, labels, test_size=test_size, random_state=random_state, stratify=labels
    )

    return (train_images, train_labels), (test_images, test_labels)

# Load the dataset
(train_images, train_labels), (test_images, test_labels) = load_custom_dataset()

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

# Define class names
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']

# Build the CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10)
])

# Compile the model
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Train the model
history = model.fit(train_images, train_labels, epochs=10,
                    validation_data=(test_images, test_labels))

# Evaluate the model
test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)
print(f'\nTest accuracy: {test_acc}')

# Plot training history
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')
plt.show()

# Function to plot images with their predictions
def plot_image(i, predictions_array, true_label, img):
    true_label, img = true_label[i], img[i]
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])

    plt.imshow(img, cmap=plt.cm.binary)

    predicted_label = np.argmax(predictions_array)
    if predicted_label == true_label:
        color = 'blue'
    else:
        color = 'red'

    plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                100*np.max(predictions_array),
                                class_names[true_label[0]]),
                                color=color)

# Make predictions
probability_model = tf.keras.Sequential([model,
                                         tf.keras.layers.Softmax()])
predictions = probability_model.predict(test_images)

# Plot a grid of 15 images with their predictions
num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
    plt.subplot(num_rows, 2*num_cols, 2*i+1)
    plot_image(i, predictions[i], test_labels, test_images)
plt.tight_layout()
plt.show()